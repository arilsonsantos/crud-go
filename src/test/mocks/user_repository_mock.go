// Code generated by MockGen. DO NOT EDIT.
// Source: src/model/repository/UserRepositoryInterface.go
//
// Generated by this command:
//
//	mockgen -source=src/model/repository/UserRepositoryInterface.go -destination=src/test/mocks/user_repository_mock.go -package=mocks
//
// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	errors "github.com/arilsonsantos/crud-go.git/src/errors"
	domain "github.com/arilsonsantos/crud-go.git/src/model/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockUserRepositoryInterface is a mock of UserRepositoryInterface interface.
type MockUserRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryInterfaceMockRecorder
}

// MockUserRepositoryInterfaceMockRecorder is the mock recorder for MockUserRepositoryInterface.
type MockUserRepositoryInterfaceMockRecorder struct {
	mock *MockUserRepositoryInterface
}

// NewMockUserRepositoryInterface creates a new mock instance.
func NewMockUserRepositoryInterface(ctrl *gomock.Controller) *MockUserRepositoryInterface {
	mock := &MockUserRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepositoryInterface) EXPECT() *MockUserRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserRepositoryInterface) Create(domainInterface domain.UserDomainInterface) (domain.UserDomainInterface, *errors.ErrorDto) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", domainInterface)
	ret0, _ := ret[0].(domain.UserDomainInterface)
	ret1, _ := ret[1].(*errors.ErrorDto)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserRepositoryInterfaceMockRecorder) Create(domainInterface any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserRepositoryInterface)(nil).Create), domainInterface)
}

// Delete mocks base method.
func (m *MockUserRepositoryInterface) Delete(userId string) *errors.ErrorDto {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", userId)
	ret0, _ := ret[0].(*errors.ErrorDto)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUserRepositoryInterfaceMockRecorder) Delete(userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserRepositoryInterface)(nil).Delete), userId)
}

// FindByEmail mocks base method.
func (m *MockUserRepositoryInterface) FindByEmail(email string) (domain.UserDomainInterface, *errors.ErrorDto) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmail", email)
	ret0, _ := ret[0].(domain.UserDomainInterface)
	ret1, _ := ret[1].(*errors.ErrorDto)
	return ret0, ret1
}

// FindByEmail indicates an expected call of FindByEmail.
func (mr *MockUserRepositoryInterfaceMockRecorder) FindByEmail(email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmail", reflect.TypeOf((*MockUserRepositoryInterface)(nil).FindByEmail), email)
}

// FindByEmailAndPassword mocks base method.
func (m *MockUserRepositoryInterface) FindByEmailAndPassword(email, password string) (domain.UserDomainInterface, *errors.ErrorDto) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmailAndPassword", email, password)
	ret0, _ := ret[0].(domain.UserDomainInterface)
	ret1, _ := ret[1].(*errors.ErrorDto)
	return ret0, ret1
}

// FindByEmailAndPassword indicates an expected call of FindByEmailAndPassword.
func (mr *MockUserRepositoryInterfaceMockRecorder) FindByEmailAndPassword(email, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmailAndPassword", reflect.TypeOf((*MockUserRepositoryInterface)(nil).FindByEmailAndPassword), email, password)
}

// FindById mocks base method.
func (m *MockUserRepositoryInterface) FindById(email string) (domain.UserDomainInterface, *errors.ErrorDto) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", email)
	ret0, _ := ret[0].(domain.UserDomainInterface)
	ret1, _ := ret[1].(*errors.ErrorDto)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockUserRepositoryInterfaceMockRecorder) FindById(email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockUserRepositoryInterface)(nil).FindById), email)
}

// Update mocks base method.
func (m *MockUserRepositoryInterface) Update(userId string, userDomainInterface domain.UserDomainInterface) *errors.ErrorDto {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", userId, userDomainInterface)
	ret0, _ := ret[0].(*errors.ErrorDto)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUserRepositoryInterfaceMockRecorder) Update(userId, userDomainInterface any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserRepositoryInterface)(nil).Update), userId, userDomainInterface)
}
